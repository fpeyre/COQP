/** Initialise l'etat de base de notre capteur de présence aléatoirement
*/

rule "Initialize contact states"
	when 
		System started
	then
		Presence?.members.forEach(window|
			postUpdate(window,if(Math::random > 0.5) OPEN else CLOSED)
		)
end

/** Simule le comportement de notre capteur . On change aléatoirement son état toute les minutes
Le format utilisé est une expression cron (http://www.quartz-scheduler.org/documentation/quartz-2.1.x/tutorials/tutorial-lesson-06 )
*/

rule "Simulateur capteur présence"
	when
		Time cron "0 0/1 * * * ?"

	then
	Presence?.members.forEach(window|
			postUpdate(window, if(Math::random > 0.5) OPEN else CLOSED)
		)

end

/** Mise a jour de la valeur Etat nous permettant de changer la phrase à afficher dans notre page principale (COQP ou Libre)
*/
rule "Update contact"
when
	Item CapteurPresenceAirTest changed  or System started
then	
	if(CapteurPresenceAirTest.state==OPEN){
	postUpdate(Etat,0)
	postUpdate(Prive,1)
	}
	else{
	postUpdate(Etat,1)
	}
	
end


/** Permet de d'activer le mode privée via le switch présent sur la page principale . On désactive alors la caméra . Il faut pour cela que la salle soit occupé .
*/
rule "Switch Prive On "
when
	Item mySwitch received command ON 
then			
	postUpdate(Prive,1)	
end

/** Permet de désactiver le mode privée via le switch présent sur la page principale . On active alors la caméra 
*/
rule "Switch Prive Off "
when
	Item mySwitch received command OFF or CapteurPresenceAirTest changed
then	
	postUpdate(Prive,0)		
end

/** Permet de désactiver le mode privée via le switch enocean physique . On active alors la caméra 
*/
rule "Switch Physique Prive On "
when
	Item mySwitchON received update ON
then		
	postUpdate(Prive,0)	
end

/** Permet de d'activer le mode privée via le switch enocean physique . On désactive alors la caméra . Il faut pour cela que la salle soit occupé .
*/
rule "Switch Physique Privee Off "
when
	Item mySwitchOFF received update ON
then		
	postUpdate(Prive,1)	
end
